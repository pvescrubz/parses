const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const fs = require("fs");
const path = require("path");

puppeteer.use(StealthPlugin());

const CATEGORIES = [
    { name: "Rust", url: "https://lis-skins.com/ru/market/rust/?page=", pages: 57 },
];

const OUTPUT_FOLDER = "images";
const OUTPUT_FILE = "items.json";

if (!fs.existsSync(OUTPUT_FOLDER)) {
    fs.mkdirSync(OUTPUT_FOLDER);
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞
async function downloadImage(page, imageUrl, category, pageNumber, index) {
    try {
        const imageName = `page${pageNumber}_${category}_item${index + 1}.png`;
        const imagePath = path.join(OUTPUT_FOLDER, imageName);

        // üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        const response = await page.goto(imageUrl, { timeout: 30000 });
        const buffer = await response.buffer();
        fs.writeFileSync(imagePath, buffer);

        return imageName;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageUrl}: ${error.message}`);
        return null;
    }
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function scrapePage(category, pageNumber, browser) {
    const url = `${category.url}${pageNumber}`;
    console.log(`üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

    const page = await browser.newPage();
    await page.setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36");
    await page.setViewport({ width: 1280, height: 800 });
    await page.setExtraHTTPHeaders({
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
    });

    try {
        await page.goto(url, { waitUntil: "networkidle2", timeout: 60000 });

        const items = await page.evaluate(() => {
            return Array.from(document.querySelectorAll(".item.market_item")).map((item) => {
                const nameElement = item.querySelector(".name-inner");
                const priceElement = item.querySelector(".price");
                const imgElement = item.querySelector("img.image");
                const linkElement = item.getAttribute("data-link");

                return {
                    name: nameElement ? nameElement.innerText.trim() : "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è",
                    price: priceElement ? priceElement.innerText.trim().replace("‚Ç¨", "").trim() : "–ù–µ—Ç —Ü–µ–Ω—ã",
                    imageUrl: imgElement ? imgElement.src : null,
                    link: linkElement || null
                };
            });
        });

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageNumber} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}`);

        let validItems = [];

        for (let i = 0; i < items.length; i++) {
            const item = items[i];

            if (!item.link || !item.imageUrl) continue; // ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            // ‚úÖ –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            const imageName = await downloadImage(page, item.imageUrl, category.name, pageNumber, i);
            if (!imageName) continue; // ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å

            item.category = category.name;
            item.image = imageName;

            validItems.push(item);
        }

        return validItems;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}: ${error.message}`);
        return [];
    } finally {
        await page.close();
    }
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –í–°–ï–• —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function scrapeCategory(category, browser) {
    let categoryItems = [];

    for (let i = 1; i <= category.pages; i++) {
        const items = await scrapePage(category, i, browser);
        categoryItems = categoryItems.concat(items);
    }

    return categoryItems;
}

// üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
(async () => {
    const browser = await puppeteer.launch({
        headless: true,
        args: [
            "--no-sandbox",
            "--disable-setuid-sandbox",
            "--disable-blink-features=AutomationControlled"
        ]
    });

    let allItems = [];

    for (const category of CATEGORIES) {
        console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.name}`);
        const items = await scrapeCategory(category, browser);
        allItems = allItems.concat(items);
    }

    await browser.close();

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    fs.writeFileSync(OUTPUT_FILE, JSON.stringify(allItems, null, 2));
    console.log("üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ items.json");
})();
